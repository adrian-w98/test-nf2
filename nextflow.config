// Nextflow configuration for MedNIST Model Benchmark pipeline

manifest {
    name = 'nextflow-monai-model-benchmark'
    description = 'MedNIST Classification Model Benchmark using MONAI and Nextflow'
    author = 'Author'
    version = '1.0.0'
    nextflowVersion = '>=21.10.0'
}

// Load base configuration
includeConfig 'conf/base.config'

// Load resource configuration
includeConfig 'conf/resources.config'

// Load parameters
includeConfig 'conf/params.config'

// Execution profiles
profiles {
    standard {
        // Default profile using local executor
        process.executor = 'local'
    }
    
    docker {
        docker.enabled = true
        docker.runOptions = '--gpus all'
        process.container = 'pytorch/pytorch:latest'
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        process.container = 'pytorch/pytorch:latest'
    }
    
    slurm {
        process.executor = 'slurm'
        process.clusterOptions = '--account=account_name'
        process.queue = 'gpu'
    }
    aks_azurefiles {
        // Specify the Kubernetes executor

        process {
            executor = 'k8s'
            container = 'kalbedevops.azurecr.io/ubuntu-py-torch:1.0.0'
        }

        // Kubernetes settings
        k8s {
            // The Kubernetes context to use (optional, defaults to current context)
            // context = 'your-aks-cluster-context'

            // The Kubernetes namespace where Nextflow pods will be launched
            // It's good practice to use a dedicated namespace for your Nextflow workloads
            namespace = 'nextflow' // CHANGEME: to your desired namespace

            // The Kubernetes Service Account to be used by Nextflow pods
            // This service account needs permissions to manage pods, jobs, pvcs, etc.
            serviceAccount = 'nextflow-sa' // CHANGEME: to your service account name

            // --- Azure Files Persistent Storage Configuration ---
            // The name of your PersistentVolumeClaim (PVC) that is bound to an Azure Files share
            storageClaimName = 'nextflow-work-pvc' // CHANGEME: to your PVC name

            // The path where the PVC (Azure Files share) will be mounted inside the pods
            storageMountPath = '/mnt/workspace' // This can be any valid path

            // Directory on the shared volume where 'kuberun' will stage the pipeline project.
            // This path is relative to where the PVC is mounted in the Nextflow driver pod.
            // launchDir = '/mnt/workspace/launch'

            // The path within the mounted Azure Files share where Nextflow will create its work directory
            // This path is relative to 'storageMountPath' if it starts with '/',
            // or directly under it. It's often simplest to make it a sub-directory.
            workDir = '/mnt/workspace/work' // This will be the actual $PWD for pipeline tasks

            // Recommended: Use Kubernetes Jobs for tasks (requires Nextflow 22.05.0-edge or later)
            // This improves resilience and management of tasks.
            computeResourceType = 'Job'
        }

        // Docker/Container settings
        docker {
            enabled = true
            // Optional: Specify your Azure Container Registry (ACR) or other registry
            // If your images are in a private registry, ensure AKS is configured to pull from it.
            // registry = 'youracrname.azurecr.io'
        }

        // Optional: Define default pod annotations or labels
        // pod {
        //    label 'environment', 'dev'
        //    annotation 'sidecar.istio.io/inject', 'false'
        // }
    }
}

// Create reports directory
reports_dir = "reports"

// Execution reports
report {
    enabled = true
    file = "${reports_dir}/execution_report.html"
    overwrite = true
}

timeline {
    enabled = true
    file = "${reports_dir}/execution_timeline.html"
    overwrite = true
}

trace {
    enabled = true
    file = "${reports_dir}/execution_trace.txt"
    overwrite = true
}

dag {
    enabled = true
    file = "${reports_dir}/flowchart.png"
    overwrite = true
}

// Function to make sure output directory ends with trailing slash
def outputDirTrailingSlash() {
    return "${params.outdir}".endsWith('/') ? "${params.outdir}" : "${params.outdir}/"
}