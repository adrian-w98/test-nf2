// Base configuration for MedNIST Classification pipeline

process {
    // General process configuration
    cpus = 1
    memory = 4.GB
    time = 1.h
    
    // Error strategy
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
    maxRetries = 3
    maxErrors = '-1'
    
    // Process-specific configuration
    withName: 'TRAIN_MODEL' {
        cpus = 4
        memory = 6.GB
        time = 1.h
    }
}

// Function to check if resources exceed max limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Execution reports and visualization settings
dag {
    enabled = true
    file = "flowchart.png"
    overwrite = true
}

report {
    enabled = true
    file = "execution_report.html"
    overwrite = true
}

timeline {
    enabled = true
    file = "timeline.html"
    overwrite = true
}

trace {
    enabled = true
    file = "trace.txt"
    overwrite = true
}