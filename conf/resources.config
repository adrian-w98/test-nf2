// Resource configuration for MedNIST Classification pipeline

process {
    // Label-specific resource configurations
    withLabel: 'process_low' {
        cpus = { check_max( 2, 'cpus' ) }
        memory = { check_max( 4.GB, 'memory' ) }
        time = { check_max( 1.h, 'time' ) }
    }
    
    withLabel: 'process_medium' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
    }
    
    withLabel: 'process_high' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB, 'memory' ) }
        time = { check_max( 8.h, 'time' ) }
    }
    
    withLabel: 'process_gpu' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB, 'memory' ) }
        time = { check_max( 8.h, 'time' ) }
        containerOptions = { workflow.containerEngine == "singularity" ? '--nv' : 
                          ( workflow.containerEngine == "docker" ? '--gpus all' : null ) }
    }
}

// Function to check if resources exceed max limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Tag processes with resource labels
process {
    withName: 'PREPARE_DATA' {
        label = 'process_medium'
    }
    
    withName: 'TRAIN_MODEL' {
        label = 'process_gpu'
    }
    
    withName: 'EVALUATE_MODEL' {
        label = 'process_medium'
    }
}